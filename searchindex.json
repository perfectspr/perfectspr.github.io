{"categories":[{"title":"rust","uri":"https://perfectspr.github.io/categories/rust/"},{"title":"工具","uri":"https://perfectspr.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"title":"杂项","uri":"https://perfectspr.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"title":"编程","uri":"https://perfectspr.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"posts":[{"content":"公司要求远程工作，不得已需要用Windows开发.\n折腾了几天，基本上搞定了Windows下开发环境配置问题，其中Powershell成了Linux Terminal的替代品，尝试了cygwin, hyper等终端模拟器，但是性能实在太差。 公司规定不能开启WSL，也没有管理员权限，只好用Powershell了。\nPowershell 默认做了很多别名(Alias), 目的是将linux下的命令映射到Powershell 命令.\n目录和文件处理  查看当前目录  ls   删除目录  rm -r -fo test_directory   删除文件  rm test_file   删除文件  ls    查找文件\n推荐用fd和fzf命令查找文件，速度很快. 可以用Chocolatey安装.\n  choco install fd fzf # 查找当前目录下所有js文件 fd .js # fzf模糊过滤所有包括conf的文件名 fd conf | fzf   打开目录或文件  # 打开当前目录 start . # 打开文件 start filename   目录跳转  # 回到Home目录 cd ~ # 回到根目录 cd /  历史命令 按Ctrl+R可以搜索历史命令，类似于Linux\n# 查看历史命令 history # 过滤 history | fzf  设置代理 # 查看当前代理设置 Get-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' | Select-Object ProxyServer, ProxyEnable  如果ProxyEnable等于1，说明代理已经设置.\n否则设置代理\nSet-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -name ProxyServer -Value \u0026quot;代理服务器地址:端口号\u0026quot; Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' ProxyEnable -value 1  编辑启动文件 Powershell的启动文件是$profile环境变量的值.\n# 打开profile文件 vi $profile # 或者 notepad $profile  在profile文件中可以添加自定义别名,输入以下内容并保存:\n# 为常用git命令设置别名 function git-push {git push} function git-pull {git pull} function git-status {git status} function git-commit($comment) {git commit -am \u0026quot;“$comment\u0026quot;} Set-Alias -Name gst -Value git-status Set-Alias -Name gpl -Value git-pull Set-Alias -Name gph -Value git-push Set-Alias -Name gcam -Value git-commit # 设置短提示符 function prompt { $p = Split-Path -leaf -path (Get-Location) \u0026quot;$p\u0026gt; \u0026quot; } # 修改Path环境变量 $env:Path += \u0026quot;;C:\\apps\\node\\bin\u0026quot;  ","id":0,"section":"posts","summary":"公司要求远程工作，不得已需要用Windows开发. 折腾了几天，基本上搞定了Windows下开发环境配置问题，其中Powershell成了Li","tags":["powershell"],"title":"Powershell 常用命令","uri":"https://perfectspr.github.io/2020/02/powershell/","year":"2020"},{"content":"Poppler是一个开源的PDF渲染库, 用C++编写，许多免费的PDF处理软件都用它来渲染PDF文档。它同时提供了一套命令行工具用于管理PDF文件和提取内容。\n pdfdetach - 从PDF中提取嵌入式文档； pdffonts - 列出PDF中使用的字体； pdfimages - 从PDF中以原始分辨率提取所有嵌入式图像； pdfinfo - 列出PDF的所有信息； pdfseparate - 从PDF中提取单个页面； pdftocairo - 使用cairo将单页从PDF转换为矢量或位图格式； pdftohtml - 将PDF转换为HTML格式的保留格式； pdftoppm - 将PDF页面转换为位图； pdftops - 将PDF转换为可打印的PS格式； pdftotext - 从PDF中提取所有文本； pdfunite - 合并几个PDF。  安装 Mac brew install poppler  Ubuntu sudo apt install poppler-utils  Windows choco install poppler  使用 # PDF转JPG pdftoppm -jpeg test.pdf # PDF转text pdftotext test.pdf  小技巧 工作需要，看英文专利文档头疼，想复制内容再翻译出来，但是专利文档的PDF文件无法复制文本，或者有些专利文件内部是图片，不能转换成纯文本。可以利用poppler将PDF转换成JPG，然后用tesseract 做OCR,生成纯文本。\n","id":1,"section":"posts","summary":"Poppler是一个开源的PDF渲染库, 用C++编写，许多免费的PDF处理软件都用它来渲染PDF文档。它同时提供了一套命令行工具用于管理PD","tags":["pdf","poppler","jpg"],"title":"开源PDF处理工具Poppler","uri":"https://perfectspr.github.io/2020/02/pdf-process/","year":"2020"},{"content":"折腾了一天，总算搭好了知识手册。以后技术相关的内容都会写到知识手册。这个博客只做简单记录。\n发现github的raw文件无法显示，Readme中的图片都显示不了，原来 https://raw.githubusercontent.com/ 被墙了。\n希望早日恢复，好把我的donate仓库迁移过来。\n知识手册会持续更新，欢迎访问: https://perfectspr.github.io/handbook/.\n","id":2,"section":"posts","summary":"折腾了一天，总算搭好了知识手册。以后技术相关的内容都会写到知识手册。这个博客只做简单记录。 发现github的raw文件无法显示，Readme","tags":["handbook"],"title":"我的知识手册","uri":"https://perfectspr.github.io/2020/02/my-handbook/","year":"2020"},{"content":"最近收到许多Rust相关推荐文章，看起来很诱人，准备开始学习Rust。\nMac开发环境搭建 安装Rust工具包Restup:\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  安装完成后，将cargo可执行目录放到Path环境变量，然后检查cargo的版本。\n$ echo 'export PATH=$HOME/.cargo/bin:$PATH' \u0026gt;\u0026gt; ~/.bash_profile $ . ~/.bash_profile $ cargo --version  cargo是Rust的构建工具，类似npm和maven. cargo的包叫做crate(箱子). https://crates.io/. 没有VPN的话，建议用清华的源:\n$ echo 'export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup' \u0026gt;\u0026gt; ~/.bash_profile $ . ~/.bash_profile  安装Vim插件coc-rls. Coc.nvim目前是我最喜欢的Vim自动完成插件, 通过Language-Server它可以支持大部分编程语言。语法高亮插件用vim-polyglot，它支持绝大部分语言的语法高亮。\n:CocInstall coc-rls  Hello World # 创建项目 $ cargo new hello-rust $ cd hello-rust $ cargo run  添加依赖 打开Rust的项目配置文件Cargo.toml,加入以下依赖\nferris-says = \u0026quot;1.1\u0026quot;  然后安装依赖:\n$ cargo build  类似npm，此命令会在当前目录下生成Cargo.lock文件。Rust借鉴了现代语言的很多最佳实践,舒服:)\n写个小程序 打开src/main.rs:\nextern crate ferris_says; use ferris_says::say; use std::io::{ stdout, BufWriter }; fn main() { let stdout = stdout(); let out = b\u0026quot;Hello fellow Rustaceans!\u0026quot;; let width = 24; let mut writer = BufWriter::new(stdout.lock()); say(out, width, \u0026amp;mut writer).unwrap(); }  然后运行\n$ cargo run  输出以下内容：\n---------------------------- | Hello fellow Rustaceans! | ---------------------------- \\ \\ _~^~^~_ \\) / o o \\ (/ '_ - _' / '-----' \\  ","id":3,"section":"posts","summary":"最近收到许多Rust相关推荐文章，看起来很诱人，准备开始学习Rust。 Mac开发环境搭建 安装Rust工具包Restup: $ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh 安","tags":["rust"],"title":"Hello Rust","uri":"https://perfectspr.github.io/2020/02/hello-rust/","year":"2020"},{"content":"新型冠状病毒肆虐，只好在家工作。\n用Hugo搭建了这个博客，准备发布到Gitee Pages下。图片用腾讯的COS管理.\n一直学习却很少输出，希望借这个博客记录和分享我的经历。\n凡事贵在坚持，加油！\n","id":4,"section":"posts","summary":"新型冠状病毒肆虐，只好在家工作。 用Hugo搭建了这个博客，准备发布到Gitee Pages下。图片用腾讯的COS管理. 一直学习却很少输出，希望","tags":["杂项"],"title":"Hello World!","uri":"https://perfectspr.github.io/2020/02/hello/","year":"2020"}],"tags":[{"title":"handbook","uri":"https://perfectspr.github.io/tags/handbook/"},{"title":"jpg","uri":"https://perfectspr.github.io/tags/jpg/"},{"title":"pdf","uri":"https://perfectspr.github.io/tags/pdf/"},{"title":"poppler","uri":"https://perfectspr.github.io/tags/poppler/"},{"title":"powershell","uri":"https://perfectspr.github.io/tags/powershell/"},{"title":"rust","uri":"https://perfectspr.github.io/tags/rust/"},{"title":"杂项","uri":"https://perfectspr.github.io/tags/%E6%9D%82%E9%A1%B9/"}]}